from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from keyboards import reply
from states import TourSelection, UserWishState
from neiro.neural_search import find_similar_tours
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database.models import Tour, UserWish
from database.engine import session_maker

neuro_search_router = Router()


@neuro_search_router.callback_query(F.data.startswith('search_neiro'))
async def start_neuro_search(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TourSelection.neuro_search)
    await callback.message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä:\n\n–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- –ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö –≤ —Ç–µ–ø–ª–æ–π —Å—Ç—Ä–∞–Ω–µ\n"
        "- –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç —Å –¥–µ—Ç—å–º–∏\n"
        "- –≠–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º–µ—Å—Ç–∞–º",
        reply_markup=types.ReplyKeyboardRemove()
    )
    


@neuro_search_router.message(TourSelection.neuro_search)
async def process_neuro_search(message: types.Message, state: FSMContext):
    user_query = message.text

    wish_text = message.text.strip()
    await state.set_state(UserWishState.waiting_for_wish)


    user_id = message.from_user.id
    
    async with session_maker() as session:
        new_wish = UserWish(
            user_id=user_id,
            wish_text=wish_text
        )
        session.add(new_wish)
        await session.commit()
        await session.close()


    await message.answer("üîé –ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")
    
    try:
        tours = await find_similar_tours(user_query)
        
        if not tours:
            await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.", reply_markup=reply.keyboard_back)
            return
            
        for tour in tours:
            if tour.seasons == '–ó–∏–º–∞':
                smile = 'üå®Ô∏è'
            elif tour.seasons == '–û—Å–µ–Ω—å':
                smile = 'üåßÔ∏è'

            elif tour.seasons == '–õ–µ—Ç–æ':
                smile = '‚òÄÔ∏è'
            else:
                smile = '‚õÖ'

            rating = round(tour.rating)

            if rating >=0 and rating <=1:
                rating_smile = '‚≠ê‚òÜ‚òÜ‚òÜ‚òÜ'
            elif rating >=1 and rating <=2:
                    rating_smile = '‚≠ê‚≠ê‚òÜ‚òÜ‚òÜ'
            elif rating >=2 and rating <=3:
                    rating_smile = '‚≠ê‚≠ê‚≠ê‚òÜ‚òÜ'
            elif rating >=3 and rating <=4:
                    rating_smile = '‚≠ê‚≠ê‚≠ê‚≠ê‚òÜ'
            elif rating >=4 and rating <=5:
                    rating_smile = '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê'

            tour_info = (
                f"üåü <b>–ù–µ–π—Ä–æ–ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª:</b>\n\n"
                f"üåç {tour.country}, {tour.city}\n"
                f"üìÖ {tour.in_date.strftime('%d.%m.%Y')}-{tour.out_date.strftime('%d.%m.%Y')}\n"
                f"üë• –î–ª—è {tour.count_people} —á–µ–ª. | {smile} {tour.seasons}\n"
                f"üè∑ –¢–∏–ø: {tour.tour_type}\n"
                f"‚ú® –†–µ–π—Ç–∏–Ω–≥: {tour.rating}\t{rating_smile}\n"
                f"üíµ –¶–µ–Ω–∞: {tour.price:.2f} —Ä—É–±.\n"
                f"üìù {tour.description}"
            )
            
            buy_button = InlineKeyboardButton(
                text="üí≥ –ö—É–ø–∏—Ç—å",
                callback_data=f"buy_{tour.id}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[buy_button]])
            
            if tour.image:
                await message.answer_photo(tour.image, caption=tour_info, reply_markup=keyboard)
            else:
                await message.answer(tour_info, reply_markup=keyboard)

        await message.answer('–ï—Å–ª–∏ –Ω–µ –ø–æ–¥—à–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –Ω–µ–π—Ä–æ. T—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ', reply_markup=reply.keyboard_back)
                
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",reply_markup=reply.keyboard_back)
    finally:
        await state.clear()